(function () {
    'use strict';

    var fireConsentCallbackUrl = function fireConsentCallbackUrl(consentString, integration, trace) {
      var callbackUrl = integration.parameters.consentCallback;
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = "".concat(callbackUrl, "&dtmc_cmpcapture=").concat(trace, "&gdpr_consent=").concat(consentString, "&gdpr=1");
      document.head.appendChild(script);
    };

    var secondsPerDay = 24 * 60 * 60;
    var millisecondsPerSecond = 1000;
    var PATH_PREFIX = '/profile/visit/';
    var EXP_SUFFIX = '_exp';
    var Parameters = {
      CLEAR_TAG_FLAG: 'clear_tag_flag'
    };

    function removeStorageItem(key, type) {
      type = type || 'localStorage';
      try {
        var storage = window[type];
        storage.removeItem(key + EXP_SUFFIX);
        storage.removeItem(key);
        return true;
      } catch (e) {
        console.debug(e);
        return false;
      }
    }
    function getStorageItem(key, type) {
      type = type || 'localStorage';
      var val = null;
      try {
        var storage = window[type];
        var expVal = storage.getItem(key + EXP_SUFFIX);
        if (!expVal) {
          val = storage.getItem(key);
        } else {
          var expDate = new Date(expVal);
          var isValid = expDate.getTime() - Date.now() > 0;
          if (isValid) {
            val = storage.getItem(key);
          } else {
            removeStorageItem(key);
          }
        }
      } catch (e) {
        console.debug(e);
      }
      return val;
    }
    function setStorageItem(key, val, expires, type) {
      type = type || 'localStorage';
      try {
        var storage = window[type];
        if (expires !== undefined) {
          var expStr = new Date(Date.now() + expires * millisecondsPerSecond).toUTCString();
          storage.setItem(key + EXP_SUFFIX, expStr);
        }
        storage.setItem(key, val);
      } catch (e) {
        console.debug(e);
        return false;
      }
      return true;
    }

    function setValueNoCookie(key, value, ageInSeconds) {
      setStorageItem(key, value, ageInSeconds, 'localStorage');
      setStorageItem(key, value, ageInSeconds, 'sessionStorage');
    }
    var isValidValue = function isValidValue(val) {
      return val !== 'undefined' && val !== undefined && val !== null && val !== '';
    };
    function getValueNoCookie(key, mode) {
      var localStorage = getStorageItem(key, 'localStorage') || '';
      var sessionStorage = getStorageItem(key, 'sessionStorage') || '';
      var getBestValueNoCookie = function getBestValueNoCookie() {
        if (isValidValue(localStorage)) {
          return localStorage;
        }
        if (isValidValue(sessionStorage)) {
          return sessionStorage;
        }
        return '';
      };
      if (mode === 'all') {
        return {
          localStorage: localStorage,
          sessionStorage: sessionStorage
        };
      }
      return getBestValueNoCookie();
    }

    var traceString = 'consentDisco';
    var urlAlreadyFired = false;
    var tc;
    var cmpTimeout;
    var tcfTimeout;
    var isTcfApiAvailable = function isTcfApiAvailable(win) {
      return win.__tcfapi && typeof win.__tcfapi === 'function';
    };
    function validTCF(value) {
      if (value && value.length >= 30 && value.charAt(0) === 'C') {
        return true;
      }
      return false;
    }
    var getTcData = function getTcData(win, pushTrace) {
      var tcData;
      if (win.dtm_config && win.dtm_config.dtmc_tcf_string) {
        if (validTCF(win.dtm_config.dtmc_tcf_string)) {
          pushTrace('clientProvided');
          tcData = win.dtm_config.dtmc_tcf_string;
        }
        delete win.dtm_config.dtmc_tcf_string;
      }
      if (!tcData) {
        tcData = getValueNoCookie('dtm_tcdata', 'best');
        if (tcData) {
          pushTrace('localStorage');
        }
      }
      return tcData;
    };
    var setTcData = function setTcData(dtmTcData) {
      return setValueNoCookie('dtm_tcdata', dtmTcData, 390 * secondsPerDay);
    };
    var pushTrace = function pushTrace(traceInfo) {
      traceString += '_' + traceInfo;
    };
    var getTrace = function getTrace() {
      return traceString;
    };
    var processTcfApi = function processTcfApi(win, integration) {
      if (isTcfApiAvailable(win)) {
        setTimeout(function () {
          if (!urlAlreadyFired) {
            pushTrace('apiTimeout');
            urlAlreadyFired = true;
            fireConsentCallbackUrl('', integration, getTrace());
          }
        }, cmpTimeout);
        var tcfCallback = function tcfCallback(tcData, tcSuccess) {
          if (tcData) {
            pushTrace('*' + tcData.eventStatus);
          } else {
            pushTrace('*');
          }
          if (tcSuccess) {
            if (tcData.tcString) {
              if (tcData.eventStatus === 'tcloaded' || tcData.eventStatus === 'useractioncomplete') {
                tc = tcData.tcString;
                if (!urlAlreadyFired) {
                  urlAlreadyFired = true;
                  fireConsentCallbackUrl(tc, integration, getTrace());
                }
                setTcData(tc);
              }
            } else {
              if (!tcData.gdprApplies) {
                tc = '';
                pushTrace('notApply');
                if (!urlAlreadyFired) {
                  urlAlreadyFired = true;
                  fireConsentCallbackUrl(tc, integration, getTrace());
                }
              }
            }
          } else {
            tc = '';
            pushTrace('noSuccess');
            if (!urlAlreadyFired) {
              urlAlreadyFired = true;
              fireConsentCallbackUrl(tc, integration, getTrace());
            }
          }
        };
        __tcfapi('addEventListener', 2, tcfCallback);
      } else {
        pushTrace('apiMissing');
        tc = '';
        if (!urlAlreadyFired) {
          urlAlreadyFired = true;
          fireConsentCallbackUrl(tc, integration, getTrace());
        }
      }
    };
    var findTcString = function findTcString(win, integration) {
      try {
        if (!integration || !integration.parameters) {
          cmpTimeout = 7000;
          tcfTimeout = 0;
        } else {
          cmpTimeout = integration.parameters.cmpCallbackMs || 7000;
          tcfTimeout = integration.parameters.awaitTcfApiMs || 0;
        }
        tc = getTcData(win, pushTrace);
        if (tc && !urlAlreadyFired) {
          urlAlreadyFired = true;
          fireConsentCallbackUrl(tc, integration, getTrace());
        }
        if (isTcfApiAvailable(win) || tcfTimeout === 0) {
          processTcfApi(win, integration);
        } else {
          var apiTimer = 0;
          var tcfInterval = setInterval(function () {
            if (apiTimer >= tcfTimeout || isTcfApiAvailable(win)) {
              pushTrace('!' + apiTimer + '!');
              processTcfApi(win, integration);
              clearInterval(tcfInterval);
            } else {
              apiTimer += 200;
            }
          }, 200);
        }
      } catch (e) {
        if (!urlAlreadyFired) {
          urlAlreadyFired = true;
          fireConsentCallbackUrl('', integration, 'errorOccurred');
        }
      }
    };
    function discoverConsent(win, integration) {
      findTcString(win, integration);
    }

    function deleteTag() {
      var scriptElement = document.currentScript;
      if (scriptElement && scriptElement.src.toLowerCase().includes(PATH_PREFIX)) {
        scriptElement.parentNode.removeChild(scriptElement);
      }
    }
    function cleanupScript(integration) {
      var parameters = integration.parameters;
      if (parameters) {
        if (parameters.hasOwnProperty(Parameters.CLEAR_TAG_FLAG)) {
          var clearTagFlag = parameters[Parameters.CLEAR_TAG_FLAG];
          if (clearTagFlag) {
            deleteTag();
          }
        }
      }
    }

    var integration = {"eventType":"consent-disco","env":null,"parameters":{"cmpCallbackMs":"7000","awaitTcfApiMs":"0","consentCallback":"https://dtm.decathlon.fr/profile/visit/consent/js?dtm_cid=81418&dtm_fid=101&dtm_promo_id=5&dtm_cmagic=5d9903&cachebuster=357580368&dtm_form_uid=644007403516163779"},"mappings":null,"persistence":null,"fieldMasks":null,"plugins":null};
    discoverConsent(window, integration);
    cleanupScript(integration);

})();
